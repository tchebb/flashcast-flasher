#!/bin/sh
set -o pipefail

LOG_FILES='/root/flashcast.log'
FTS_BOOT_MODE="$(fts-get bootloader.command | sed -e 's/^boot-//')"

log_cmd() {
	"$@" 2>&1 | tee -a $LOG_FILES
}

log() {
	log_cmd echo "$1"
}

fatal() {
	set-led red
	log "SETUP FAILED: ${1}" | tee /etc/motd
	exit 1
}

select_images_device() {
	CMDLINE_BOOT_MODE="$(sed -re 's/.*\bandroidboot\.mode=(\w+)\b.*/\1/' /proc/cmdline)"
	if test -z "$FTS_BOOT_MODE" ; then
		FTS_BOOT_MODE='normal'
	fi

	# When the boot mode passed on the command line is the same as the FTS
	# bootloader command, we must be booting from an MTD partition.
	if test "$CMDLINE_BOOT_MODE" = "$FTS_BOOT_MODE" ; then
		echo '/dev/mtdblock4'
	else
		echo '/dev/sda1'
	fi
}

select_log_file() {
	I=1
	while test -f "$1/flashcast-${I}.log" ; do
		I="$((I+1))"
	done
	echo "$1/flashcast-${I}.log"
}

has_recovery_param() {
	fts-get bootloader.recovery | tail -n '+2' | grep -qe "^${1}\$"
}

# Check hardware version.
if ! grep -qe '\bandroidboot\.hardware=eureka-b3\b' /proc/cmdline ; then
	fatal "Unsupported hardware! This script is designed for the original Chromecast."
fi

# Figure out where to look for mods before we reset the boot command.
IMAGES_DEVICE="$(select_images_device)"
log "Looking for mods on ${IMAGES_DEVICE}"

# Make the bootloader happy.
log "Resetting crash counter and boot mode"
fts-set crashcounter.android 0
set-boot-cmd normal

# Clear any downloaded OTAs.
log "Clearing OTAs"
log_cmd flash-image '/usr/share/flasher/remove-ota'

# If the device doesn't exist, give it 5 seconds to be detected.
if ! test -b "$IMAGES_DEVICE" ; then
	log "${IMAGES_DEVICE} doesn't exist, waiting 5 seconds before retrying"
	sleep 5
fi

# Mount the device to a temporary directory.
IMAGES_DIR="$(mktemp -d)"
log "Mounting ${IMAGES_DEVICE} to ${IMAGES_DIR}"
if ! mount "$IMAGES_DEVICE" "$IMAGES_DIR" ; then
	if test -b "$IMAGES_DEVICE" ; then
		fatal "${IMAGES_DEVICE} does not contain a recognized filesystem"
	else
		fatal "${IMAGES_DEVICE} is not a block device"
	fi
fi

# Check if this is a dry run.
if test -f "${IMAGES_DIR}/dry_run" ; then
	log "dry_run file is present, not performing destructive commands"
	export DRY_RUN=1
fi

unmount_images() {
	log "Unmounting and removing ${IMAGES_DIR}"
	umount "$IMAGES_DIR"
	rmdir "$IMAGES_DIR"
}

if test -f "${IMAGES_DIR}/init_partitions" ; then
	unmount_images
	log "init_partitions file is present, setting up partitions"
	log_cmd flash-image '/usr/share/flasher/init-partitions'
else
	trap unmount_images EXIT

	# Set up logging to the device.
	if test -w "$IMAGES_DIR" ; then
		EXTERNAL_LOG="$(select_log_file "$IMAGES_DIR")"
		cp '/root/flashcast.log' "$EXTERNAL_LOG"
		LOG_FILES="$LOG_FILES $EXTERNAL_LOG"
		log "Opened log file ${EXTERNAL_LOG}"
	else
		log "${IMAGES_DIR} is not writable, not logging"
	fi

	# Check for images.
	if has_recovery_param '--wipe_data' ; then
		log "Factory reset requested, performing"
		log_cmd flash-image '/usr/share/flasher/factory-reset'
	elif test -f "${IMAGES_DIR}/eureka_image.zip" ; then
		log "Found eureka_image.zip, using"
		log_cmd flash-image "${IMAGES_DIR}/eureka_image.zip"
	elif test -d "${IMAGES_DIR}/eureka_image" ; then
		log "Found eureka_image directory, using"
		log_cmd flash-image "${IMAGES_DIR}/eureka_image"
	elif test -f "${IMAGES_DIR}/Chromecast-Rooted-System-GTVHacker-cj_000-July27-635PM.bin" ; then
		# For backwards compatibility
		log "Found legacy GTVHacker system image, using"
		log_cmd flash-image '/usr/share/flasher/gtvhacker-compat' "${IMAGES_DIR}/Chromecast-Rooted-System-GTVHacker-cj_000-July27-635PM.bin"
	elif test -d "${IMAGES_DIR}/flashcast-mods" ; then
		log "Found flashcast-mods directory, flashing all images inside"
		if test -f "${IMAGES_DIR}/ignore_errors" ; then
			log "ignore_errors file is present, ignoring errors"
			IGNORE_ERRORS=1
		fi
		log_cmd flash-image '/usr/share/flasher/iterate-images' "${IMAGES_DIR}/flashcast-mods" "$IGNORE_ERRORS"
	elif test "$FTS_BOOT_MODE" = "recovery" && test "$IMAGES_DEVICE" = "/dev/mtdblock4" && ! test -f "${IMAGES_DIR}/no_reboot" ; then
		# We do this so factory resets work, otherwise we sit in recovery.
		log "No images found on ${IMAGES_DEVICE}, assuming factory reset"
		log_cmd flash-image '/usr/share/flasher/factory-reset'
		
	else
		fatal "No images found on ${IMAGES_DEVICE}"
	fi
fi

# Reboot the system once we're done flashing, unless the user has prevented it or the script failed.
if test "$?" -eq 0 ; then
	log "Flashing succeeded"
	if ! test -f "${IMAGES_DIR}/no_reboot" ; then
		log "Rebooting"
		reboot
	else
		log "no_reboot file is present, not rebooting"
	fi
else
	log "Flashing failed"
	set-led red
fi
